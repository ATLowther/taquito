import { bytes2Char,char2Bytes } from '../src/tzip16-utils';
import { example005 } from './data'
/**
 * Tzip16 utils test
 */

describe('Tzip16 utils functions', () => {

    it('Simple test: Should convert a string of char (utf-8) to a string of bytes, and convert it back to the same string of char', () => {
        const charString = 'http:';
        const bytes = '687474703a';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });

    it('Test1: Should convert a string of char (utf-8) to a string of bytes, and convert it back to the same string of char', () => {
        const charString = 'tezos-storage:contents';
        const bytes = '74657a6f732d73746f726167653a636f6e74656e7473';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });

    it('Test2: Should convert a string of char (utf-8) to a string of bytes, and convert it back to the same string of char', () => {
        const charString = 'tezos-storage:here';
        const bytes = '74657a6f732d73746f726167653a68657265';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });

    it('Test3: Should convert a string of char (utf-8) to a string of bytes, and convert it back to the same string of char', () => {
        const charString = `{"version":"tzcomet-example v0.0.42"}`;
        const bytes = '7b2276657273696f6e223a22747a636f6d65742d6578616d706c652076302e302e3432227d';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });

    it('Test4: Should convert a string of char (utf-8) to a string of bytes, and convert it back to the same string of char', () => {
        const charString = JSON.stringify(example005);
        const bytes = '7b226e616d65223a226578616d706c652d66726f6d2d7468652d736f75726365222c226465736372697074696f6e223a225468697320697320612066616b65206d6574616461746120626c6f6220636f6e73747275637465642061745c6e7372632f6c69625f636f6e74726163745f6d657461646174612f636f72652f6d657461646174615f636f6e74656e74732e6d6c20696e207468652054657a6f7320636f6465626173652e5c6e5c6e4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742c2073656420646f5c6e656975736d6f642074656d706f7220696e6369646964756e74207574206c61626f726520657420646f6c6f7265206d61676e6120616c697175612e20557420656e696d2061645c6e6d696e696d2076656e69616d2c2071756973206e6f737472756420657865726369746174696f6e20756c6c616d636f206c61626f726973206e6973692075745c6e616c697175697020657820656120636f6d6d6f646f20636f6e7365717561742e5c6e202020202020202020205c6e44756973206175746520697275726520646f6c6f7220696e20726570726568656e646572697420696e20766f6c7570746174652076656c697420657373652063696c6c756d5c6e646f6c6f726520657520667567696174206e756c6c612070617269617475722e204578636570746575722073696e74206f6363616563617420637570696461746174206e6f6e5c6e70726f6964656e742c2073756e7420696e2063756c706120717569206f666669636961206465736572756e74206d6f6c6c697420616e696d206964206573745c6e6c61626f72756d2e5c6e222c2276657273696f6e223a22302e34322e30222c226c6963656e7365223a7b226e616d65223a224d4954222c2264657461696c73223a22546865204d4954204c6963656e7365227d2c22686f6d6570616765223a2268747470733a2f2f6769746c61622e636f6d2f74657a6f732f74657a6f73222c22696e7465726661636573223a5b22545a49502d3136222c22545a49502d3132225d2c227669657773223a5b7b226e616d65223a227669657730222c22696d706c656d656e746174696f6e73223a5b7b226d696368656c736f6e2d73746f726167652d76696577223a7b2272657475726e2d74797065223a7b227072696d223a226e6174227d2c22636f6465223a5b5d7d7d2c7b22726573742d6170692d7175657279223a7b2273706563696669636174696f6e2d757269223a2268747470733a2f2f6578616d706c652e636f6d2f76312e6a736f6e222c2270617468223a222f6765742d736f6d657468696e67227d7d5d2c2270757265223a747275657d2c7b226e616d65223a22766965772d3031222c22696d706c656d656e746174696f6e73223a5b7b226d696368656c736f6e2d73746f726167652d76696577223a7b22706172616d65746572223a7b227072696d223a2270616972222c2261726773223a5b7b227072696d223a226d7574657a222c22616e6e6f7473223a5b2225616d6f756e74225d7d2c7b227072696d223a22737472696e67222c22616e6e6f7473223a5b22256e616d65225d7d5d7d2c2272657475726e2d74797065223a7b227072696d223a226d6170222c2261726773223a5b7b227072696d223a22737472696e67227d2c7b227072696d223a22737472696e67227d5d7d2c22636f6465223a5b7b227072696d223a22445550227d2c7b227072696d223a22444950222c2261726773223a5b5b7b227072696d223a22434452227d2c7b227072696d223a2250555348222c2261726773223a5b7b227072696d223a22737472696e67227d2c7b22737472696e67223a22487568227d5d7d2c7b227072696d223a224641494c57495448227d5d5d7d5d2c22616e6e6f746174696f6e73223a5b7b226e616d65223a2225616d6f756e74222c226465736372697074696f6e223a2254686520616d6f756e742077686963682073686f756c64206d65616e20736f6d657468696e6720696e20636f6e746578742e204974277320696e20606d7574657a602077686963682073686f756c6420616c736f206d65616e20736f6d657468696e67206d6f7265207468616e206c6f72656d20697073756d20646f6c6f72207768617465766572c2a0e280a6227d2c7b226e616d65223a22256e616d65222c226465736372697074696f6e223a22546865206e616d65206f6620746865207468696e67206265696e6720717565726965642e227d5d2c2276657273696f6e223a22507343415254484147617a4b6248746e4b664c7a5167336b6d7335326b535270676e445939383261396f59735358524c514562227d7d5d7d5d7d';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });

    it('Test5: Should convert a string of char (utf-8) with Emoji to a string of bytes, and convert it back to the same string of char', () => {
        const charString = 'Test 😀, 🤣 & 💰';
        const bytes = '5465737420f09f98802c20f09fa4a3202620f09f92b0';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });

    it('Test6: Should convert a string of char (utf-8) with naughty string to a string of bytes, and convert it back to the same string of char', () => {
        const charString = '¯\_(ツ)_/¯';
        const bytes = 'c2af5f28e38384295f2fc2af';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });

    it('Test7: Should convert a string of char (utf-8) with naughty string to a string of bytes, and convert it back to the same string of char', () => {
        const charString = '𝕋𝕙𝕖 𝕢𝕦𝕚𝕔𝕜 𝕓𝕣𝕠𝕨𝕟 𝕗𝕠𝕩 𝕛𝕦𝕞𝕡𝕤 𝕠𝕧𝕖𝕣 𝕥𝕙𝕖 𝕝𝕒𝕫𝕪 𝕕𝕠𝕘';
        const bytes = 'f09d958bf09d9599f09d959620f09d95a2f09d95a6f09d959af09d9594f09d959c20f09d9593f09d95a3f09d95a0f09d95a8f09d959f20f09d9597f09d95a0f09d95a920f09d959bf09d95a6f09d959ef09d95a1f09d95a420f09d95a0f09d95a7f09d9596f09d95a320f09d95a5f09d9599f09d959620f09d959df09d9592f09d95abf09d95aa20f09d9595f09d95a0f09d9598';

        expect(char2Bytes(charString)).toEqual(bytes);
        expect(bytes2Char(bytes)).toEqual(charString);
    });
});

